# -*- coding: utf-8 -*-
"""IPL_Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pcguA6HfpIRJLoitNPz_iRbg-OqOs4Tk

**Project Name - IPL Analysis**

***Project Type - EDA***

***Contrinution - Indivisual***

# **Project Summary**

In this project I have to collect the information about all the players who has been sold in IPL 2022. I have to collect all their past performance such as their current strike rate , their average, total runs they had made till now, number of matches they had played, etc.

Then I have make a team of best 11 players in which we have 3 battersman, 4 bowlers, 3 allrounders and 1 wicket keeper.

# **Problem Statment**

We have consolidated the data for each of the player sold in the IPL 2022 auction and that of the reatained players from each franchise.

**The data contains information like** - matches played,runs,wickets,average,strike rate,catches,runouts,stumps,etc.

**Based on these data points** - we will try to create the best 11 from these set of players from the current campaign.

We can summarize our analysis in the following steps:

1. Extraction and loading the data.
2. Cleaning the data and removing the noise.
3. Analyze the data on different parameters.
4. Visualizing the important statistical findings.
5.Making the best team of 11 -based on the ICC worls cup winning squad formation and the last year's squad formation of the winning team in the IPL, i.e. how many batters, bowlers and allrounders should be included in the team.

# **Import libraries**
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""# **Dataset loading**"""

#mount the drive
from google.colab import drive
drive.mount ('/content/drive')

#load dataFrame
dataset=pd.read_csv('/content/IPLData.csv')
dataset

"""# **Dataset first view**"""

dataset.head()

"""# **Dataset Information**"""

dataset.info()

"""# **Dataset Discription**"""

# describing the dataset
dataset.describe()

"""# **Missing values / Null values**"""

#counting all the null values in each column
dataset.isna().sum()

# Visualizing the missing values
sns.heatmap(dataset.isnull(), cbar=False )

"""---

# **Cleaning the Dataset**

In the above data,the players can be initially segragated based on following parameters
1. Capped - Batters,Bowlers,Allrounders,Wicket Keeper
2. Uncapped - Batters,Bowlers,Allrounders,Wicket Keepers

The uncapped players are playing the IPl for the first time,or relavant data isn't avaliable therefore we have used their domestic T20 performances,and T20 international performances.

#**Segregating Dataset**

---

# **Capped Batting**

The segregation of the batters based on the capped data gives us the batters that have a history of playing IPL matches.
"""

batters = dataset.loc[(dataset["Player_Type"] == "Batter")]

batters_new = batters.loc[(batters["Capped"] == 1)]

Capped_batters = batters_new[['Player Name',
                              'Team',
                              'Nationality',
                              'Matches_Played',
                              'Runs',
                              'Average',
                              'Strike_Rate']]

# print top 5 row of Capped_batters
Capped_batters.head()

"""# **Capped Bowlers**

Capped bowlers contains the bowlers data that has already played IPL matches before the 2022 campaign
"""

bowlers = dataset.loc[(dataset["Player_Type"] == "Bowler ")]

bowlers_new = bowlers.loc[(bowlers["Capped"] == 1)]

Capped_bowlers = bowlers_new[['Player Name',
                             'Team',
                             'Nationality',
                             'Matches_Played',
                             'Wickets',
                             'Bowling_average',
                             'Economy',
                             'Bowling_Strike_Rate']]

# print top 5 capped bowlers
Capped_bowlers.head()

"""# **Capped Keepers**

The Capped Keeper data consist of the keepers that have a history of the playing IPL matches
"""

Keepers = dataset.loc[(dataset["Player_Type"] == "Keeper")]

Keepers_new = Keepers.loc[(Keepers["Capped"] == 1)]

Capped_Keepers = Keepers_new[['Player Name',
                              'Team',
                              'Nationality',
                              'Matches_Played',
                              'Runs',
                              'Average',
                              'Strike_Rate',
                              'Catches',
                              'Run_outs',
                              'Stumps']]

# print top 5 Capped keepers
Capped_Keepers.head()

"""# **Capped Allrounder**

we have kept the bowling and batting parameters for the allrounders to analyze all rounder performance
"""

Allrounders = dataset.loc[(dataset["Player_Type"] == "Allrounder")]

Allrounder_new = Allrounders.loc[(Allrounders["Capped"] == 1)]

Capped_Allrounders = Allrounder_new[['Player Name',
                                     'Team',
                                     'Nationality',
                                     'Matches_Played',
                                     'Runs',
                                     'Average',
                                     'Strike_Rate',
                                     'Wickets',
                                     'Bowling_average',
                                     'Economy',
                                     'Bowling_Strike_Rate']]

# print top 5 rows of the Capped allrounders
Capped_Allrounders.head()

# Cleaning the data by making the null or NAN values 0.

Capped_batters = Capped_batters.fillna(0)
Capped_bowlers = Capped_bowlers.fillna(0)
Capped_Allrounders = Capped_Allrounders.fillna(0)
Capped_Keepers = Capped_Keepers.fillna(0)

# Checkingh null values in data

print(Capped_batters.isna().sum())
print(Capped_bowlers.isna().sum())
print(Capped_Allrounders.isna().sum())
print(Capped_Keepers.isna().sum())

"""# **Initial Analysis**

---

In this section,we will analyze data for batters, bowlers, keepers and allrounders.

#**Analyzing the Batters Data**
"""

#Here we have narrowed our analysis to batters who have a batting average more than the 32.0
top_batters = Capped_batters.loc[(Capped_batters["Average"] >= 32.0)]

#Sort the data in descending order - with respect to each parameter
top_batters_average = top_batters.sort_values('Average', ascending=False)
top_batters_strike_rate = top_batters.sort_values('Strike_Rate', ascending=False)
top_batters_runs = top_batters.sort_values('Runs', ascending=False)
top_batters_matches = top_batters.sort_values('Matches_Played', ascending=False)

# the data of each of the batters in the descending order of batting average
top_batters_average

# the batters data in the descending order of the strike rate
top_batters_strike_rate

# the runs scored data of the batters in descending order
top_batters_runs

# the batters matched played data in descending order
top_batters_matches

"""Form our analysis, if we rank from 0-10, the top three batters that will come while analysis each of the above data are:
1. David Warner
2. KL Rahul
3. Virat Kohli

#**Analysising the bowlers data**
"""

#here we have to narrow our analysis on the based of bowling average of the player to be less than 24
top_bowlers = Capped_bowlers.loc[(Capped_bowlers["Bowling_average"] <= 24.0)]

top_bowlers_average = top_bowlers.sort_values('Bowling_average')
top_bowlers_strike_rate = top_bowlers.sort_values('Bowling_Strike_Rate')
top_bowlers_wickets = top_bowlers.sort_values('Wickets', ascending=False)
top_bowlers_economy = top_bowlers.sort_values('Economy')
top_bowlers_matches = top_bowlers.sort_values('Matches_Played', ascending=False)

#this dataframe contains the top bowling average in ascending average
top_bowlers_average

# the dataframe consists of top bowler strike rates in ascending order.
top_bowlers_strike_rate

# the dataframe consisting of top bowler economy in ascending order
top_bowlers_economy

# the dataframe consist of top wickets in descending order
top_bowlers_wickets

# this dataframe contains the matches played by bowlers in descending order
top_bowlers_matches

"""Form our analysis, if we rank doen the parameters from 1-10. Th top bowling options are as follows :
1. Kagiso Rabada
2. Jasprit Bumrah
3. Yuzvendra Chahal
4. Nathan Coulter-Nile

#**Analyzing the Allrounders Data**
"""

#we have narrow our analysis by further segregating the allrounder based on strike rate equal to or more than 140.0
top_allrounders = Capped_Allrounders.loc[(Capped_Allrounders["Strike_Rate"] >= 140.0)]

top_allrounder_average = top_allrounders.sort_values('Average', ascending=False)
top_allrounder_strike_rate = top_allrounders.sort_values('Strike_Rate', ascending=False)
top_allrounder_runs = top_allrounders.sort_values('Runs', ascending=False)
top_allrounder_matches = top_allrounders.sort_values('Matches_Played', ascending=False)
top_allrounder_bowling_average = top_allrounders.sort_values('Bowling_average')
top_allrounder_bowling_strike_rate = top_allrounders.sort_values('Bowling_Strike_Rate')
top_allrounder_wickets = top_allrounders.sort_values('Wickets', ascending=False)
top_allrounder_economy = top_allrounders.sort_values('Economy')

# the dataframe consisting of players average in descending order of top allrounders
top_allrounder_average

# the dataframe consisting of the matches information of the top all rounder in descending order
top_allrounder_matches

# the dataframe consisting of top all rounder bowling average in ascending order
top_allrounder_bowling_average

#the dataframe consisting of bowling strike rate info in ascending order of allrounder players
top_allrounder_bowling_strike_rate

# the dataframe consisting about the info of the wickets in descending order of allrounder players
top_allrounder_wickets

# the dataframe consits of the economy of top all rounders players in ascensing order
top_allrounder_economy

# the dataframe consist of strike rate of top all rounder players in descending order
top_allrounder_strike_rate

# the dataframe consist of top all rounders players runs in descending order
top_allrounder_runs

"""Form our analysis, if we rank allrounders from 1-10 on the various parameters. The top allrounder options are as follows:
1. Ander Russell
2. Sunil Narine
3. Hardik Pandye
4. Jofra Archer

#**Analyzing the Keepers Data**
"""

# we have narrowed our analysis down to the keepers avaeraging more than 25.0
top_keepers = Capped_Keepers.loc[(Capped_Keepers["Average"] >= 25.0)]

#Sorting the data in descending order - with respect to each parameter.
top_keepers_average = top_keepers.sort_values('Average', ascending=False)
top_keepers_strike_rate = top_keepers.sort_values('Strike_Rate', ascending=False)
top_keepers_runs = top_keepers.sort_values('Runs', ascending=False)
top_keepers_matches = top_keepers.sort_values('Matches_Played', ascending=False)
top_keepers_catches = top_keepers.sort_values('Catches', ascending=False)
top_keepers_runouts = top_keepers.sort_values('Run_outs', ascending=False)
top_keepers_stumps = top_keepers.sort_values('Stumps', ascending=False)

# the dataframe consist of the average of the top keepers in descending order
top_keepers_average

# the dataframe consist of top keepers strike rate in descending order
top_keepers_strike_rate

# the dataframe consist of top keeper's runs in desending order
top_keepers_runs

# the dataframe consist of the matches played by the top players in descending order
top_keepers_matches

# the dataframe consist of the top keeper's catches data in descending order
top_keepers_catches

# the dataframe consist of the runout data for the top keepers in descending order
top_keepers_runouts

# the dataframe consist of the top keeper's stump data in descending order
top_keepers_stumps

"""If we rank the keepers in the order of 1-10 on the above paarameters. The top 3 keepers wiil be 

1. MS Dhoni
2. Dinesh Karthik
3. Rishabh Pant

---

# **Visualization For Enhanced Analysis**

Now, the initial analysis that has been done on the segregated data. You can create a few visual representation of the same to get better analysis of the data.
"""

#Visulization of Batters Data
#the plot shows each of the top batters strike rate.
plt.figure(figsize=(20,10))
sns.barplot(x='Player Name', y='Strike_Rate', data=top_batters)

# this plot shows the top batters runs
plt.figure(figsize=(20,10))
sns.barplot(x='Player Name', y='Runs', data=top_batters)

# this plot shows the top batters matches played
plt.figure(figsize=(20,10))
sns.barplot(x='Player Name', y='Matches_Played', data=top_batters)

# this plot shows the top batters average
plt.figure(figsize=(20,10))
sns.barplot(x='Player Name', y='Average', data=top_batters)

#Visulization of the Bowlers data
# this plot shows the bowling average of each of the top bowlers
plt.figure(figsize=(20,10))
sns.barplot(x='Player Name', y='Bowling_average', data=top_bowlers)

# this plot shows the economy of each of the top bowlers
plt.figure(figsize=(20,10))
sns.barplot(x='Player Name', y='Economy', data=top_bowlers)

# this plot shows the bowling strike rate of each of the top bowlers
plt.figure(figsize=(20,10))
sns.barplot(x='Player Name', y='Bowling_Strike_Rate', data=top_bowlers)

# this plot shows the wickets taken by each of the top bowlers
plt.figure(figsize=(20,10))
sns.barplot(x='Player Name', y='Wickets', data=top_bowlers)

# this plot shows the matches played by each of the top bowlers
plt.figure(figsize=(20,10))
sns.barplot(x='Player Name', y='Matches_Played', data=top_bowlers)

#Visualization of the Allrounders Data
# this plot shows the strike rate of each of the top allrounders
plt.figure(figsize=(20,10))
sns.barplot(x='Player Name', y='Strike_Rate', data=top_allrounders)

# this plot shows the average of each of the top allrounders
plt.figure(figsize=(20,10))
sns.barplot(x='Player Name', y='Average', data=top_allrounders)

# this plot shows the matches played by each of the top allrounders
plt.figure(figsize=(20,10))
sns.barplot(x='Player Name', y='Matches_Played', data=top_allrounders)

# this plot shows the top allrounders runs
plt.figure(figsize=(20,10))
sns.barplot(x='Player Name', y='Runs', data=top_allrounders)

# this plot shows the Bowling average of each of the top allrounders
plt.figure(figsize=(20,10))
sns.barplot(x='Player Name', y='Bowling_average', data=top_allrounders)

# this plot shows the economy of the top allrounders
plt.figure(figsize=(20,10))
sns.barplot(x='Player Name', y='Economy', data=top_allrounders)

# this plot shows the bowling strike rate of the top allrounders
plt.figure(figsize=(20,10))
sns.barplot(x='Player Name', y='Bowling_Strike_Rate', data=top_allrounders)

# this plot shows the wickets taken by top allrounders
plt.figure(figsize=(20,10))
sns.barplot(x='Player Name', y='Wickets', data=top_allrounders)

# VIsualization of the keepers data
# this plot shows the strike rate of each of the top keepers
plt.figure(figsize=(20,10))
sns.barplot(x='Player Name', y='Average', data=top_keepers)

# this plot shows runs by the top keeprs
plt.figure(figsize=(20,10))
sns.barplot(x='Player Name', y='Runs', data=top_keepers)

# this plot shows catches taken by the top keeprs
plt.figure(figsize=(20,10))
sns.barplot(x='Player Name', y='Catches', data=top_keepers)

# this plot shows run outs done by the top keeprs
plt.figure(figsize=(20,10))
sns.barplot(x='Player Name', y='Run_outs', data=top_keepers)

# this plot shows stumps by the top keeprs
plt.figure(figsize=(20,10))
sns.barplot(x='Player Name', y='Stumps', data=top_keepers)

# this plot shows matches played by the top keeprs
plt.figure(figsize=(20,10))
sns.barplot(x='Player Name', y='Matches_Played', data=top_keepers)

"""# **Forming Our Best 11 for the Campaign based on the above analysis**

1. We will consider the number of players from each category that the T20 world cup winning and the last year's IPL winning team played in their Final matches.
2. the Australia squad consisted of -3 Batters, 3 Allrounders, 4 Bowlers with 1 spin option and 1 Wicket Keeper.
3. The Chenni Squad consist of - 4 Batters,3 Allrounders, 3 Bowlers and 1 wicket Keeper.
4. For our final analysis we will consider the ratio of the players in the best 11 as follows:
    1. 3 Batters
    2. 3 Allrounders
    3. 4 Bowlers with 2 Spin Options
    4. 1 Wicket Keeper
"""

#Batters for the final 11 - KL  Rahul, Virat Kholi, David Warner
#here, we are storing the values of each player in a seprate dataframe to use for displaying using the barplot
top_batters.reset_index(drop=True)
matches_values = [top_batters.iloc[6]['Matches_Played'],top_batters.iloc[2]['Matches_Played'],top_batters.iloc[5]['Matches_Played']]
runs_values = [top_batters.iloc[6]['Runs'],top_batters.iloc[2]['Runs'],top_batters.iloc[5]['Runs']]
average_values = [top_batters.iloc[6]['Average'],top_batters.iloc[2]['Average'],top_batters.iloc[5]['Average']]
strike_rate_values = [top_batters.iloc[6]['Strike_Rate'],top_batters.iloc[2]['Strike_Rate'],top_batters.iloc[5]['Strike_Rate']]
labels = ['KL Rahul', 'David Warner', 'Virat Kohli']

fig, axes =plt.subplots(2,2, figsize=(10,10))
axes[0][0].set_title("Matches Played")
axes[0][1].set_title("Runs in IPL Career")
axes[1][0].set_title("Strike Rate")
axes[1][1].set_title("Average")
sns.barplot(x=labels, y=matches_values, ax=axes[0][0])
sns.barplot(x=labels, y=runs_values, ax=axes[0][1])
sns.barplot(x=labels, y=strike_rate_values, ax=axes[1][0])
sns.barplot(x=labels, y=strike_rate_values, ax=axes[1][1])

#Allrounders for the final 11 - Andre Russell, Sunil Narine, Hardik Pandya
top_allrounders.reset_index(drop=True)
matches_values = [top_allrounders.iloc[5]['Matches_Played'],top_allrounders.iloc[9]['Matches_Played'],top_allrounders.iloc[6]['Matches_Played']]
runs_values = [top_allrounders.iloc[5]['Runs'],top_allrounders.iloc[9]['Runs'],top_allrounders.iloc[6]['Runs']]
average_values = [top_allrounders.iloc[5]['Average'],top_allrounders.iloc[9]['Average'],top_allrounders.iloc[6]['Average']]
strike_rate_values = [top_allrounders.iloc[5]['Strike_Rate'],top_allrounders.iloc[9]['Strike_Rate'],top_allrounders.iloc[6]['Strike_Rate']]
bowling_strike_rate_values = [top_allrounders.iloc[5]['Bowling_Strike_Rate'],top_allrounders.iloc[9]['Bowling_Strike_Rate'],top_allrounders.iloc[6]['Bowling_Strike_Rate']]
bowling_average_values = [top_allrounders.iloc[5]['Bowling_average'],top_allrounders.iloc[9]['Bowling_average'],top_allrounders.iloc[6]['Bowling_average']]
wickets_values = [top_allrounders.iloc[5]['Wickets'],top_allrounders.iloc[9]['Wickets'],top_allrounders.iloc[6]['Wickets']]
economy_values = [top_allrounders.iloc[5]['Economy'],top_allrounders.iloc[9]['Economy'],top_allrounders.iloc[6]['Economy']]

labels = ['Ander Russell', 'Sunil Narine', 'Hardik Panday']

fig, axes = plt.subplots(4,2, figsize=(20,20))
axes[0][0].set_title("Matches")
axes[0][1].set_title("Runs")
axes[1][0].set_title("Average")
axes[1][1].set_title("Strike Rate")
axes[2][0].set_title("Bowling Strike Rate")
axes[2][1].set_title("Bowling Average")
axes[3][0].set_title("Wickets")
axes[3][1].set_title("Economy")

sns.barplot(x=labels, y=matches_values, ax=axes[0][0])
sns.barplot(x=labels, y=runs_values, ax=axes[0][1])
sns.barplot(x=labels, y=average_values, ax=axes[1][0])
sns.barplot(x=labels, y=strike_rate_values, ax=axes[1][1])
sns.barplot(x=labels, y=bowling_strike_rate_values, ax=axes[2][0])
sns.barplot(x=labels, y=bowling_average_values, ax=axes[2][1])
sns.barplot(x=labels, y=wickets_values, ax=axes[3][0])
sns.barplot(x=labels, y=economy_values, ax=axes[3][1])

#Bowlers for the final 11 - Jasprit Bumrah, Kagiso Rabada, Nathan Coulter-Nile, Yuzi Chahal

top_bowlers.reset_index(drop=True)
matches_values = [top_bowlers.iloc[10]['Matches_Played'],top_bowlers.iloc[0]['Matches_Played'],top_bowlers.iloc[7]['Matches_Played'],top_bowlers.iloc[1]['Matches_Played']]
wickets_values = [top_bowlers.iloc[10]['Wickets'],top_bowlers.iloc[0]['Wickets'],top_bowlers.iloc[7]['Wickets'],top_bowlers.iloc[1]['Wickets']]
bowling_average_values = [top_bowlers.iloc[10]['Bowling_average'],top_bowlers.iloc[0]['Bowling_average'],top_bowlers.iloc[7]['Bowling_average'],top_bowlers.iloc[1]['Bowling_average']]
bowling_strike_rate_values = [top_bowlers.iloc[10]['Bowling_Strike_Rate'],top_bowlers.iloc[0]['Bowling_Strike_Rate'],top_bowlers.iloc[7]['Bowling_Strike_Rate'],top_bowlers.iloc[1]['Bowling_Strike_Rate']]
economy_values = [top_bowlers.iloc[10]['Economy'],top_bowlers.iloc[0]['Economy'],top_bowlers.iloc[7]['Economy'],top_bowlers.iloc[1]['Economy']]
labels = ['Jasprit Bumrah', 'Kagiso Rabada', 'Nathan Coulter-Nile', 'Yuzi Chahal']

fig, axes = plt.subplots(3,2, figsize=(15,15))
axes[0][0].set_title("Matches Played")
axes[0][1].set_title("Wickets")
axes[1][0].set_title("Bowling Average")
axes[1][1].set_title("Bowling Strike Rate")
axes[2][0].set_title("Economy")

sns.barplot(x=labels, y=matches_values,ax=axes[0][0])
sns.barplot(x=labels, y=wickets_values,ax=axes[0][1])
sns.barplot(x=labels, y=bowling_average_values,ax=axes[1][0])
sns.barplot(x=labels, y=bowling_strike_rate_values,ax=axes[1][1])
sns.barplot(x=labels, y=economy_values,ax=axes[2][0])

#Wicket Keeper for the final 11 - MS Dhoni

matches_values = [top_keepers.iloc[8]['Matches_Played'],top_keepers.iloc[8]['Runs']]
average_values = [top_keepers.iloc[8]['Average'],top_keepers.iloc[8]['Strike_Rate']]
keeping_values = [top_keepers.iloc[8]['Catches'],top_keepers.iloc[8]['Stumps'],top_keepers.iloc[8]['Run_outs']]

label1 = ['Matches', 'Runs']
label2 = ['Average',"Strike Rate"]
label3 = ['Catches', 'Stumps','Runs']

fig, axes = plt.subplots(1,3, figsize=(20,10))
axes[0].set_title("Matches And Runs")
axes[1].set_title("Average And Strike Rate")
axes[2].set_title("Keeping Stats")

sns.barplot(x=label1, y=matches_values, ax=axes[0])
sns.barplot(x=label2, y=average_values, ax=axes[1])
sns.barplot(x=label3, y=keeping_values, ax=axes[2])

"""# **Final 11 for IPL 2022 campaign**"""

batter1 = top_batters.loc[(top_batters["Player Name"] == 'KL Rahul ')]
batter2 = top_batters.loc[(top_batters["Player Name"] == 'David Warner ')]
batter3 = top_batters.loc[(top_batters["Player Name"] == 'Virat Kohli')]

bowler1 = top_bowlers.loc[(top_bowlers["Player Name"] == 'Yuzvendra Chahal ')]
bowler2 = top_bowlers.loc[(top_bowlers["Player Name"] == 'Jasprit Bumrah')]
bowler3 = top_bowlers.loc[(top_bowlers["Player Name"] == 'Nathan Coulter-Nile')]
bowler4 = top_bowlers.loc[(top_bowlers["Player Name"] == 'Kagiso Rabada ')]

allrounder1 = top_allrounders.loc[(top_allrounders["Player Name"] == 'Andre Russell')]
allrounder2 = top_allrounders.loc[(top_allrounders["Player Name"] == 'Sunil Narine ')]
allrounder3 = top_allrounders.loc[(top_allrounders["Player Name"] == 'Hardik Pandya')]

keeper = top_keepers.loc[(top_keepers["Player Name"] == 'MS Dhoni')]

final = [batter1, batter2, batter3, allrounder1, allrounder2, allrounder3, keeper, bowler1, bowler2, bowler3, bowler4]
final_team = pd.concat(final)
final_team = final_team.drop(labels=['Matches_Played', 'Runs', 'Average', 'Strike_Rate', 'Wickets', 'Bowling_average','Economy', 'Bowling_Strike_Rate', 'Catches', 'Run_outs', 'Stumps'], axis=1)
final_team.reset_index(drop=True)